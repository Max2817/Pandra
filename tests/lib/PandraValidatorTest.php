<?php
require_once 'PHPUnit/Framework.php';
require_once(dirname(__FILE__).'/../../config.php');
require_once dirname(__FILE__).'/../../lib/Validator.class.php';

/**
 * Test class for PandraValidator.
 * Generated by PHPUnit on 2010-01-09 at 11:52:24.
 */
class PandraValidatorTest extends PHPUnit_Framework_TestCase {
    /**
     * @var    PandraValidator
     * @access protected
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
        $this->object = new PandraValidator;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {}

    public function test_notempty() {
        $errors = array();
        $this->assertTrue(PandraValidator::check('string', 'notempty', 'notempty', $errors));

        $this->assertFalse(PandraValidator::check('', 'notempty', 'notempty', $errors));
        $this->assertTrue(!empty($errors));
    }

    public function test_isempty() {
        $errors = array();
        $this->assertTrue(PandraValidator::check('', 'isempty', 'isempty', $errors));

        $this->assertFalse(PandraValidator::check('string', 'isempty', 'isempty', $errors));
        $this->assertTrue(!empty($errors));
    }

    public function test_int() {
        $errors = array();
        $this->assertTrue(PandraValidator::check(1, 'int', 'int', $errors));

        $this->assertFalse(PandraValidator::check('string', 'int', 'int', $errors));
        $this->assertTrue(!empty($errors));
    }

    public function test_float() {
        $errors = array();
        $this->assertTrue(PandraValidator::check(1, 'float', 'float', $errors));

        $this->assertFalse(PandraValidator::check('string', 'float', 'float', $errors));
        $this->assertTrue(!empty($errors));
    }

    public function test_numeric() {
        $errors = array();
        $this->assertTrue(PandraValidator::check(1, 'notempty', 'numeric', $errors));

        $this->assertFalse(PandraValidator::check('', 'notempty', 'numeric', $errors));
        $this->assertTrue(!empty($errors));
    }

    public function test_string() {
        $errors = array();
        $this->assertTrue(PandraValidator::check('string', 'string', 'string', $errors));

        $this->assertFalse(PandraValidator::check(1, 'string', 'string', $errors));
        $this->assertTrue(!empty($errors));
    }

    public function test_bool() {
        $errors = array();
        $this->assertTrue(PandraValidator::check(true, 'bool', 'bool', $errors));

        $this->assertFalse(PandraValidator::check('NO', 'bool', 'bool', $errors));
        $this->assertTrue(!empty($errors));
    }

    public function test_maxlength() {
        $errors = array();
        $this->assertTrue(PandraValidator::check('string', 'notempty', 'notempty', $errors));

        $this->assertFalse(PandraValidator::check('', 'notempty', 'notempty', $errors));
        $this->assertTrue(!empty($errors));
    }

    public function test_minlength() {
        $errors = array();
        $this->assertTrue(PandraValidator::check('string', 'notempty', 'notempty', $errors));

        $this->assertFalse(PandraValidator::check('', 'notempty', 'notempty', $errors));
        $this->assertTrue(!empty($errors));
    }

    public function test_enum() {
        $errors = array();
        $this->assertTrue(PandraValidator::check('string', 'notempty', 'notempty', $errors));

        $this->assertFalse(PandraValidator::check('', 'notempty', 'notempty', $errors));
        $this->assertTrue(!empty($errors));
    }

    public function test_email() {
        $errors = array();
        $this->assertTrue(PandraValidator::check('string', 'notempty', 'notempty', $errors));

        $this->assertFalse(PandraValidator::check('', 'notempty', 'notempty', $errors));
        $this->assertTrue(!empty($errors));
    }

    public function test_url() {
        $errors = array();
        $this->assertTrue(PandraValidator::check('string', 'notempty', 'notempty', $errors));

        $this->assertFalse(PandraValidator::check('', 'notempty', 'notempty', $errors));
        $this->assertTrue(!empty($errors));
    }
}
?>
