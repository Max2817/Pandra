<?php
require_once 'PHPUnit/Framework.php';
require_once(dirname(__FILE__).'/../../config.php');
require_once dirname(__FILE__).'/../../lib/ColumnFamily.class.php';

class ColumnFamilyTestObject extends PandraColumnFamily {

    var $keySpace = 'Keyspace1';
    var $name = 'Standard1';

    public function constructColumns() {
        $this->addColumn('column1', 'notempty');
        $this->column_column1 = 'VALUE';
    }
}

/**
 * Test class for PandraColumnFamily.
 * Generated by PHPUnit on 2010-01-09 at 11:52:22.
 */
class PandraColumnFamilyTest extends PHPUnit_Framework_TestCase {
    /**
     * @var    PandraColumnFamily
     * @access protected
     */
    protected $obj;

    private $_keyID = 'PandraCFTest';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
        $this->obj = new ColumnFamilyTestObject();
        $this->obj->keyID = $this->_keyID;
        Pandra::connect('default', 'localhost');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {

        Pandra::disconnectAll();
    }

    /**
     * @todo Implement testLastError().
     */
    public function testLastError() {

        $this->obj->column_column1 = '';
        $lastError = $this->obj->lastError();

        $this->assertTrue(isset($lastError['column1']) && !empty($lastError['column1']));
    }

    /**
     * @todo Implement testAddColumn().
     */
    public function testAddColumn() {

        $columnName = 'newColumn';

        $column = $this->obj->addColumn($columnName);
        $this->assertTrue(get_class($column) == 'PandraColumn', 'addColumn did not return a PandraColumn');

        $column = $this->obj->getColumn($columnName);
        $this->assertTrue( ($column->name == $columnName), 'Incorrect column name returned' );
    }

    /**
     * @todo Implement testGetColumn().
     */
    public function testGetColumn() {

        $columnName = 'column1';

        $column = $this->obj->getColumn($columnName);
        $this->assertTrue(get_class($column) == 'PandraColumn', 'getColumn did not return a PandraColumn');
        $this->assertTrue($column->name == $columnName, 'Column name mismatch, expected '.$columnName.', received ',$column->name);
    }

    /**
     * @todo Implement testListColumns().
     */
    public function testListColumns() {
        $columns = $this->obj->listColumns();
        $this->assertTrue(is_array($columns) && !empty($columns));
    }

    /**
     * @todo Implement testGetRawSlice().
     */
    public function testGetRawSlice() {
        $this->assertTrue($this->obj->save(), $this->obj->lastError());
        $slice = $this->obj->getRawSlice($this->_keyID);

        $this->assertTrue(is_array($slice));
        $this->assertEquals(get_class($slice[0]), 'cassandra_ColumnOrSuperColumn');
    }

    /**
     * @todo Implement testSave().
     */
    public function testSave() {
        $this->assertTrue($this->obj->save(), $this->obj->lastError());

        // reload the object, test that column1 is the same
        $newObj = new ColumnFamilyTestObject($this->_keyID);
        $this->assertTrue($this->obj->column_column1 == $newObj->column_column1,
                            "Column didn't match after reload.  Expected '".$this->obj->column_column1."', received '".$newObj->column_column1."'");

        $this->assertTrue($newObj->isLoaded());

        $this->obj->delete();
        $this->obj->save();
    }

    /**
     * Tests that resets() after deletes or column changes revert flags
     */
    public function testReset() {
        
        $this->obj->reset();
        $this->obj->delete();

        $columns = $this->obj->listColumns();
        foreach ($columns as $column) {
            $this->obj->getColumn($column)->setValue('NEW VALUE');
            $this->obj->getColumn($column)->delete();
        }

        // make sure everything is marked for delete
        $columns = $this->obj->listColumns();
        foreach ($columns as $column) {
            $this->assertTrue($this->obj->getColumn($column)->isModified());
            $this->assertTrue($this->obj->getColumn($column)->isDeleted());
        }

        $this->assertTrue($this->obj->isDeleted());

        $this->obj->reset();

        $columns = $this->obj->listColumns();
        foreach ($columns as $column) {
            $this->assertFalse($this->obj->getColumn($column)->isDeleted());
            $this->assertFalse($this->obj->getColumn($column)->isModified());
        }

        $this->assertFalse($this->obj->isDeleted());
    }

    /**
     * Tests that the ColumnFamily columns can be populated by a two dimensional
     * associative array or from a JSON string
     */
    public function testPopulate() {
        $c1NewValue = 'TEST POST VALUE';

        $_POST = array(
            'column1' => $c1NewValue
        );

        $this->assertTrue($this->obj->populate($_POST));
        $this->assertEquals($this->obj->column_column1, $c1NewValue);

        $c1NewValue = 'TEST JSON VALUE';

        $json = '{"column1":"'.$c1NewValue.'"}';
        $this->assertTrue($this->obj->populate($json));
        $this->assertEquals($this->obj->column_column1, $c1NewValue);
    }

    /**
     * Tests column is correctly set and modified flag is true
     */
    public function testSetColumn() {
        $c1NewValue = 'TEST POST VALUE';

        $this->obj->getColumn('column1')->reset(); 
        $this->assertFalse($this->obj->getColumn('column1')->isModified());
        
        $this->obj->setColumn('column1', $c1NewValue);
        $this->assertEquals($this->obj->column_column1, $c1NewValue);
        $this->assertTrue($this->obj->getColumn('column1')->isModified());
    }
}
?>
