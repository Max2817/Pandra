<?php
require_once 'PHPUnit/Framework.php';
require_once(dirname(__FILE__).'/../../config.php');

class ColumnFamilyTestObject extends PandraColumnFamily {

}

/**
 * Test class for PandraColumn.
 * Generated by PHPUnit on 2010-01-09 at 11:52:23.
 */
class PandraColumnTest extends PHPUnit_Framework_TestCase {

    public $obj = NULL;
    public $parentCF = NULL;

    public $columnName = 'mycolumn';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * To test multiple nodes, add their connection strings here
     *
     * @access protected
     */
    protected function setUp() {
        $this->parentCF = new ColumnFamilyTestObject();
        $this->obj = new PandraColumn($this->columnName, $this->parentCF);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {

    }

    public function testSetValue() {
        $this->assertTrue($this->obj->setValue('NEW VALUE'));
        $this->assertTrue($this->obj->isModified());
    }

    public function testBindTime() {
return;
        $time = $this->obj->bindTime();
        $this->assertType(PHPUnit_Framework_Constraint_IsType::TYPE_INT, $time);
        $this->assertEquals($time, $this->obj->timestamp);

        $time = time();
        sleep(1);
        $colTime = $this->obj->bindTime($time);
        $this->assertType(PHPUnit_Framework_Constraint_IsType::TYPE_INT, $colTime);
        $this->assertEquals($time, $this->obj->timestamp);
    }

    public function testReset() {
        $this->assertFalse($this->obj->isModified());
        $this->obj->setValue('NEW VALUE');
        $this->assertTrue($this->obj->isModified());

        $this->obj->reset();
        $this->assertFalse($this->obj->isModified());
    }

    public function testMarkDelete() {
        $this->assertFalse($this->obj->isModified());
        $this->assertFalse($this->obj->isDeleted());
        
        $this->obj->markDelete();

        $this->assertTrue($this->obj->isModified());
        $this->assertTrue($this->obj->isDeleted());
    }

    public function testCallbackValue() {
        $this->obj->callback = 'md5';
        $value = 'NEW VALUE';
        $this->obj->setValue($value);

        $this->assertEquals($this->obj->value, $value);

        $md5Value = md5($value);
        $this->assertEquals($this->obj->callbackValue(), $md5Value);


    }

    public function testCast() {

        $column = new cassandra_Column();
        $column->value = 'THRIFT COLUMN VALUE';

        $pandraColumn = $this->obj->cast($column);

        $this->assertEquals(get_class($pandraColumn), 'PandraColumn');
        $this->assertEquals($pandraColumn->value, $column->value);

        // @TODO cassandra_ColumnOrSupercolumn();

    }

    public function testDelete() {
        $this->assertFalse($this->obj->isModified());
        $this->assertFalse($this->obj->isDeleted());

        $this->obj->delete();

        $this->assertTrue($this->obj->isModified());
        $this->assertTrue($this->obj->isDeleted());
    }

    public function testIsModifed() {
        $this->assertFalse($this->obj->isModified());

        $this->obj->value = 'OH HI GREAT TO SEE YOU';

        $this->assertTrue($this->obj->isModified());
    }

    public function testSave() {
        
    }
}
?>
